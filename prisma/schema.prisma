datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean      @default(false)
  score         Int          @default(0)
  hasPlayed     PlayedQuiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  topic     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String   @db.ObjectId
  question  String
  answer    String
  options   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model PlayedQuiz {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String
  score     Int    @default(0)
  user      User   @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
  timeTaken Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
